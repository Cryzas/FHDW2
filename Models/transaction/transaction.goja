model transaction {

server Server {
	public AccountManager accounts;
	public TransferManager transfers;
	void createAccount(String name);
	void clearAccounts();
	void findAccounts(String name);
	void createDebit(Account myAccount, AccountHandle otherAccount, Fraction amount, String subject);
	void createCredit(Account myAccount, AccountHandle otherAccount, Fraction amount, String subject);
	void book(AbstractTransfer tranfer);
}
class AccountManager {
	public AccountHandle ** currentAccounts;
	active void createAccount(String name) throws AccountException;
	void clearAccounts();
	void findAccounts(String name);
	event void accountChanged();
}
class TransferManager {
	public AbstractTransfer ** transfers;
	active void createTransfer(AccountHandle fromAccount, AccountHandle toAccount, Fraction amount, String subject);
	active void book(AbstractTransfer tranfer);
}
abstract class AccountHandle {
	abstract Account fetchAccount();
}
class AccountWrppr extends AccountHandle {
	prior server-only public Account account;
}
class Account extends AccountHandle {
	indexed prior public String name;
	public Fraction balance;
	public Entry ** entries;
	void debit(Transfer transfer);
	void credit(Transfer transfer);
}
abstract class Entry {
	prior server-only public Transfer transfer;
}
class Debit extends Entry {
}
class Credit extends Entry {
}
abstract class AbstractTransfer##AbstrTrnsfr {
	prior public String subject;
	abstract void book();
}
class Transfer extends AbstractTransfer {
	prior public server-only Account fromAccount;
	prior public server-only Account toAccount; 
	prior public Fraction amount;
}
exception AccountException {}
}

