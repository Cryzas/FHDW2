model projectx {

server Server {
	public ProgramManager programManager;
	public ModuleManager moduleManager;
	public StudyGroupManager groupManager;
	public StudentManager studentManager;
	void createProgram @@ Programm_erstellen (String name);
	void addModuleToProg @@ Modul_hinzufügen (Program program, ModuleAbstract module {moduleManager;modules});
	void addModuleToGroup @@ Modul_hinzufügen (ModuleGroup group, ModuleAbstract module {moduleManager;modules});
	void createModule @@ Modul_erstellen (ModuleAbstractSUBTYPEName type, String name);
	void addUnit @@ Unit_hinzufügen (ModuleWithUnits module, String name, Fraction creditPoints);
	void changeCPOnUnit @@ CP_ändern (Unit unit, Fraction creditPoints);
	void changeCPOnModule @@ CP_ändern (ModuleAtomar module, Fraction creditPoints);
	void startStudyGroup @@ Studiengruppe_eröffnen (Program program, String name);
	void swapCPonModuleWithUnits @@ CP_der_Units_ändern (ModuleWithUnitsSGroup module, UnitSGroup fromUnit @@ Von_Unit{;module;units}, UnitSGroup ToUnit @@ Zu_Unit{;module;units}, Fraction creditPoints);
	void createStudent @@ Student_erstellen (String firstName, String lastName, Date birthDate);
	void addStudentToGroup @@ Student_hinzufügen (StudyGroup group, Student student {studentManager;students});
}

																									/* Manager Klassen */
class ProgramManager {
	public Program ** programs;
	active void createProgram(String name) throws AlreadyExistsInParentException;
	active void addModuleToProg(Program program, ModuleAbstract module) throws CycleException, AlreadyExistsInParentException;
}

class ModuleManager {
	public ModuleAbstract ** modules;
	active void createModule(ModuleAbstractSUBTYPEName type, String name) throws AlreadyExistsInParentException;
	active void addModuleToGroup(ModuleGroup group, ModuleAbstract module) throws CycleException, AlreadyExistsInParentException;
	active void addUnit(ModuleWithUnits module, String name, Fraction creditPoints) throws CycleException, AlreadyExistsInParentException;
	active void changeCPOnUnit(Unit unit, Fraction creditPoints);
	active void changeCPOnModule(ModuleAtomar module, Fraction creditPoints);
}

class StudyGroupManager {
	public StudyGroup ** groups;
	active void startStudyGroup(Program program, String name) throws UserException;	
	active void swapCPonModuleWithUnits ## sCPonMWU(ModuleWithUnitsSGroup module, UnitSGroup fromUnit, UnitSGroup ToUnit, Fraction creditPoints) throws UnitSwapException;
}

class StudentManager {
	public Student ** students;
	active void createStudent (String firstName, String lastName, Date birthDate);
	active void addStudentToGroup ## add_S2G (StudyGroup group, Student student) throws UserException;
}

																			/* Aufbau eines Studienprogramms */
hierarchy programHierarchy;

class Program {
	public ModuleAbstract ** modules hierarchy programHierarchy;
	public prior indexed String name;
	public derived Fraction creditPoints;
	void addModule(ModuleAbstract module) throws CycleException, AlreadyExistsInParentException;
	ProgramSGroup copyForStudyGroup() throws UserException;
}

abstract string-factory class ModuleAbstract {
	public prior indexed String name;
	public abstract derived Fraction creditPoints;
	abstract ModuleAbstractSGroup copyForStudyGroup() throws UserException;
}

class ModuleGroup @@ Gruppe extends ModuleAbstract {
	public ModuleAbstract ** modules hierarchy programHierarchy;
	void addModule(ModuleAbstract module) throws CycleException, AlreadyExistsInParentException;
}

class ModuleAtomar @@ Atomar extends ModuleAbstract {
	Fraction ownCreditPoints;
	void changeCPOnModule(Fraction creditPoints);
}

class ModuleWithUnits @@ Mit_Units extends ModuleAbstract {
	public Unit ** units hierarchy programHierarchy;
	void addUnit(String name, Fraction creditPoints) throws CycleException, AlreadyExistsInParentException;
}

class Unit {
	public prior String name;
	public prior Fraction creditPoints;
	void changeCPOnUnit(Fraction creditPoints);
	UnitSGroup copyForStudyGroup() throws UserException;
}

																			/* Aufbau der Studiengruppen */
class StudyGroup {
	public prior indexed String name;
	public-write ProgramSGroup program;
	public symmetric (no-view parentGroup) Student ** students;
}

hierarchy programHierarchySGroup ## pro_hier_s;

class ProgramSGroup {
	public ModuleAbstractSGroup ** modules hierarchy programHierarchySGroup;
	public derived String name;
	public derived Fraction creditPoints;
	prior Program programCopy;
	void addModule(ModuleAbstractSGroup module) throws CycleException, AlreadyExistsInParentException;
	ProgramStudent copyForStudent() throws UserException;
}

abstract string-factory class ModuleAbstractSGroup ## m_abstr_gr {
	public abstract derived String name;
	public abstract derived Fraction creditPoints;
	prior ModuleAbstract moduleCopy;
	abstract ModuleAbstractStudent copyForStudent() throws UserException;
}

class ModuleGroupSGroup extends ModuleAbstractSGroup {
	public ModuleAbstractSGroup ** modules hierarchy programHierarchySGroup;
	void addModule(ModuleAbstractSGroup module) throws CycleException, AlreadyExistsInParentException;
}

class ModuleAtomarSGroup extends ModuleAbstractSGroup {
	prior Fraction ownCreditPoints;
}

class ModuleWithUnitsSGroup ## m_unit_gr extends ModuleAbstractSGroup {
	public UnitSGroup ** units hierarchy programHierarchySGroup;
	void addUnit(UnitSGroup unit) throws CycleException, AlreadyExistsInParentException;
	void swapCPonModuleWithUnits ## sCPonMWU(UnitSGroup fromUnit, UnitSGroup ToUnit, Fraction creditPoints) throws UnitSwapException;
}

class UnitSGroup {
	public derived String name;
	prior Unit unitCopy;
	public prior Fraction creditPoints;
	void addCP(Fraction creditPoints);
	void subCP(Fraction creditPoints) throws UnitSwapException;
	UnitStudent copyForStudent() throws UserException;
}


																			/* Aufbau der Studenten */
class Student {
	public prior String firstName;
	public prior String lastName;
	public prior Date birthDate;
	public derived Integer matrNr;
	public-write no-view ProgramStudent program;
}

hierarchy programHierarchyStudent ## pr_hier_std;

class ProgramStudent {
	public ModuleAbstractStudent ** modules hierarchy programHierarchyStudent;
	public derived String name;
	public derived Fraction creditPoints;
	prior ProgramSGroup programCopy;
	void addModule(ModuleAbstractStudent module) throws CycleException, AlreadyExistsInParentException;
}

abstract string-factory class ModuleAbstractStudent ## m_abstr_st {
	prior ModuleAbstractSGroup moduleCopy;
	public abstract derived String name;
	public abstract derived Fraction creditPoints;
}

class ModuleGroupStudent extends ModuleAbstractStudent {
	public ModuleAbstractStudent ** modules hierarchy programHierarchyStudent;
	void addModule(ModuleAbstractStudent module) throws CycleException, AlreadyExistsInParentException;
}

class ModuleAtomarStudent ## m_atom_stud extends ModuleAbstractStudent {
	derived Fraction ownCreditPoints;
}

class ModuleWithUnitsStudent ## m_unit_stud extends ModuleAbstractStudent {
	public UnitStudent ** units hierarchy programHierarchyStudent;
	void addUnit(UnitStudent unit) throws CycleException, AlreadyExistsInParentException;
}

class UnitStudent {
	prior UnitSGroup unitCopy;
	public derived String name;
	public derived Fraction creditPoints;
}

																												/* Exceptions */
exception UnitSwapException{}
exception AlreadyExistsInParentException{}

}

