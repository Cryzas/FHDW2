model studySystem {

server Server {
	public-write skip-view symmetric ( no-view parentServer) Service service;
}

abstract server Service {
	public abstract derived no-view String username;
}

server AdminService extends Service {
	public observe subAdminService ** services;
}

abstract server subAdminService {
	public prior no-view AdminService parentService;
	
	/* Fehler aus dem Error-Screen entfernen */
	abstract void removeError @@ Error_entfernen (ErrorDisplay error);

	abstract void updateMe @@ Aktualisieren();
	abstract event no-view void updatePLZ();
}

server UserManagerService extends subAdminService {
	public sorted-view leaf-view Server ** users;
	void createAdminUser @@ User_erstellen ( String name @@ Benutzername, String pw @@ Initialpasswort);
	void deleteUsers @@ User_löschen (Server ** users @@ User {users});

}

server ProgramModuleService ## PMService extends subAdminService {
	public observe ProgramManager programManager;
	public observe ModuleManager moduleManager;

	/* Funktionen zum Löschen der Unterobjekte der Manager */
	void deletePrograms @@ Programme_löschen (Program ** programs @@ Programme {programManager;programs});
	void deleteModules @@ Module_löschen (ModuleAbstract ** modules @@ Module {moduleManager;modules});

	/* Funktionen zum Entfernen von Objekten aus dem Parent */
	void removeModuleFromProg @@ Module_entfernen (Program program, ModuleAbstract ** modules @@ Module {;program;modules}); 
	void removeModuleFromGroup @@ Module_entfernen (ModuleGroup group, ModuleAbstract ** modules @@ Module {;group;modules});
	void removeUnit @@ Units_entfernen (ModuleWithUnits module, Unit ** units @@ Units {;module;units});

	/* Kommentare siehe Manager-Klassen | Service ruft Methoden der Managerklassen auf */
	void createProgram @@ Programm_erstellen (String name @@ Name);
	void addModuleToProg @@ Module_hinzufügen (Program program, ModuleAbstract ** modules @@ Module {moduleManager;modules});
	void addModuleToGroup @@ Module_hinzufügen (ModuleGroup group, ModuleAbstract ** modules @@ Module {moduleManager;modules});
	void createModule @@ Modul_erstellen (ModuleAbstractSUBTYPEName type @@ Typ, String name @@ Name);
	void addUnit @@ Unit_hinzufügen (ModuleWithUnits module, String name @@ Name, Fraction creditPoints @@ Credit_Points);
	void changeCPOnUnit @@ CP_ändern (Unit unit, Fraction creditPoints @@ Credit_Points);
	void changeCPOnModule @@ CP_ändern (ModuleAtomar module, Fraction creditPoints @@ Credit_Points);
	void startStudyGroup @@ Studiengruppe_eröffnen (Program program, String name @@ Name);
	void changeGradeSystem @@ Notensystem_ändern (ModuleAtomar module);

}

server StudyGroupService extends subAdminService {
	public skip-view observe StudyGroupManager groupManager;
	no-view derived Student ** students;

	/* Kommentare siehe Manager-Klassen | Service ruft Methoden der Managerklassen auf */
	void swapCPonModuleWithUnits @@ CP_Gewichtung_ändern (ModuleWithUnitsSGroup module, UnitSGroup fromUnit @@ Von_Unit{;module;units}, UnitSGroup ToUnit @@ Zu_Unit{;module;units}, Fraction creditPoints @@ Credit_Points);
	void endStudyGroup @@ Studiengruppe_abschließen (StudyGroup studyGroup);
	void addStudentToGroup @@ Studenten_hinzufügen (StudyGroup group, Student ** students @@ Studenten {students});
	void createStudent @@ Student_erstellen (StudyGroup group, String firstName @@ Vorname, String lastName @@ Nachname, Date birthDate @@ Geburtsdatum);
	void changeGradeforStudent @@ Note_eintragen (Student student, LectureWithGrade lecture @@ Vorlesung{;student;program;modules}, GradesInSimpleOrThirdSUBTYPEName grade @@ Note, String comment @@ Kommentar);

	/* Funktionen zum Entfernen von Objekten aus dem Parent */
	void removeStudentFromGroup @@ Studenten_entfernen (StudyGroup group, Student ** students @@ Studenten {;group;students});
	
	/* Funktionen zum Löschen der Unterobjekte der Manager */
	void deleteStudyGroups @@ Studiengruppen_löschen (StudyGroup ** groups @@ Studiengruppen {groupManager;groups});

}

server StudentManageService ## StuMService extends subAdminService {
	public skip-view observe StudentManager studentManager;

	/* Kommentare siehe Manager-Klassen | Service ruft Methoden der Managerklassen auf */
	void changeGradeOfUnit @@ Note_ändern (UnitStudent unit, GradesInThirdSUBTYPEName grade @@ Note, String comment @@ Kommentar);
	void changeGradeOfModule @@ Note_ändern (ModuleAtomarStudent module, GradesInSimpleOrThirdSUBTYPEName grade @@ Note, String comment @@ Kommentar);
	void changeGradeforStudent @@ Note_eintragen (Student student, LectureWithGrade lecture @@ Vorlesung{;student;program;modules}, GradesInSimpleOrThirdSUBTYPEName grade @@ Grade, String comment @@ Kommentar);

	/* Funktionen zum Löschen der Unterobjekte der Manager */
	void deleteStudents @@ Studenten_löschen (Student ** students @@ Studenten {studentManager;students}); 
}

																									/* Manager Klassen */
active class ProgramManager {
	public Program ** programs;
/* Programm erstellen | Exception wenn schon Modul oder Programm mit selben Namen existiert */
	void createProgram(String name) throws AlreadyExistsInParentException;
/* Modul zum jeweiligen Programm hinzufügen | Exception wenn Modul schon in Programm ist */
	void addModuleToProg(Program program, ModuleAbstract module) throws CycleException, AlreadyExistsInParentException;
/* Neue Studiengruppe eröffnen | Exception wenn schon eine Studiengruppe mit dem Namen existiert */
	event void startStudyGroup(Program program, String name) throws AlreadyExistsInParentException, NoFractionValueException;	

}

active class ModuleManager {
	public ModuleAbstract ** modules;
/* Modul erstellen mit Typ "type" | Exception wenn schon Modul oder Programm mit selben Namen existiert */
	void createModule(ModuleAbstractSUBTYPEName type, String name) throws AlreadyExistsInParentException;
/* Modul zur jeweiligen Gruppe hinzufügen | Exception wenn Modul schon in der Gruppe ist */
	void addModuleToGroup(ModuleGroup group, ModuleAbstract module) throws CycleException, AlreadyExistsInParentException;
/* Unit zu ModulMitUnits hinzufügen | Exception wenn eine Unit mit selben Namen in dem Modul bereits existiert */
	void addUnit(ModuleWithUnits module, String name, Fraction creditPoints) throws CycleException, AlreadyExistsInParentException;
/* Menge der erreichbaren creditPoints der Unit ändern */
	void changeCPOnUnit(Unit unit, Fraction creditPoints);
/* Menge der erreichbaren creditpoints des Moduls ändern */
	void changeCPOnModule(ModuleAtomar module, Fraction creditPoints);
/* Gewähltes Notensystem eines atomaren Moduls ändern [1,0/1,3/...] <-> [Bestanden,NichtBestanden] */
	void changeGradeSystem (ModuleAtomar module);
}

active class StudyGroupManager {
	public StudyGroup ** groups;
/* CreditPoints der einzelnen Units ändern, ohne die Gesamtmenge der CPs für das Modul zu verändern | Exception wenn CP <= 0 seien würden */
	event void swapCPonModuleWithUnits ## sCPonMWU(ModuleWithUnitsSGroup module, UnitSGroup fromUnit, UnitSGroup ToUnit, Fraction creditPoints) throws UnitSwapException,AlreadyFinishedException;
/* Studenten zu Studiengruppe hinzufügen | Exception wenn er schon drin ist */
 	event void addStudentToGroup ## add_S2G (StudyGroup group, Student student) throws CycleException, AlreadyExistsInParentException, AlreadyFinishedException;
/* Beendet die Studiengruppe, Noten können nicht mehr verändert werden | Exception wenn Studiengruppe schon beendet ist*/
	event void endStudyGroup (StudyGroup studyGroup) throws AlreadyFinishedException;
/* Anlegen eines neuen Studenten zu einer Studiengruppe */
	event void createStudent (StudyGroup group, String firstName, String lastName, Date birthDate) throws CycleException, AlreadyExistsInParentException, AlreadyFinishedException;

}

active class StudentManager {
	public Student ** students;
/* Note ändern und alte Note in Historie vermerken | Exception wenn Note aus falschem Notensystem gewählt wird */
	void changeGrade(LectureWithGrade lecture, GradesInSimpleOrThirdSUBTYPEName grade, String comment) throws InvalidGradeForSystemException, AlreadyFinishedException;
}

																			/* Aufbau eines Studienprogramms */
hierarchy programHierarchy;

/* Program stellt das modellierbare Studienprogramm dar */
class Program {
	public ModuleAbstract ** modules hierarchy programHierarchy;
	public prior indexed String name;
	/* wird als derived attribute aus den CP der Module errechnet. */
	public derived Fraction creditPoints;
	/* Ermöglicht das Hinzufügen von Modulen und Modulgruppen zu einem Studienprogramm. Wirft eine Exception, falls Modul/Modulgruppe bereits in Studienprogramm vorhanden ist. */
	void addModule(ModuleAbstract module) throws CycleException, AlreadyExistsInParentException;
	/* Gibt eine Kopie von sich für eine Studiengruppe aus */
	ProgramSGroup copyForStudyGroup();
}

/** Definiert das abstrakte Modul mit den Kernattributen, welche an die Children weitervererbt werden. Attribute: name, creditPoints, gradeSystem */
abstract string-factory class ModuleAbstract {
	public prior indexed String name;
	/* wird als derived attribute aus den CP der Module errechnet. */
	public abstract derived Fraction creditPoints;
	/* Gibt eine Kopie von sich für eine Studiengruppe aus */
	abstract ModuleAbstractSGroup copyForStudyGroup();
}

/** Definiert die Modul-Gruppe als Erweiterung des abstrakten Moduls */
class ModuleGroup @@ Gruppe extends ModuleAbstract {
	public ModuleAbstract ** modules hierarchy programHierarchy;
	/* Ermöglicht das Hinzufügen von Modulen zur jeweiligen Modul-Gruppe. Wirft Exception, falls Modul mit identischem Namen bereits in Modulgruppe vorhanden ist. */
	void addModule(ModuleAbstract module) throws CycleException, AlreadyExistsInParentException;
}

/** Definiert das atomare Modul als Erweiterung des abstrakten Moduls. Das atomare Modul hat selbst keine Units. */
class ModuleAtomar @@ Atomar extends ModuleAbstract {
	Fraction ownCreditPoints;
	public no-view GradeSystem gradeSystem;

	/* Ermöglicht das Ändern der Creditpoints, welche durch das erfolgreiche Absolvieren des Moduls erreicht werden können */
	void changeCPOnModule(Fraction creditPoints);
	/* Ermöglicht das Ändern des Notensystems, nach welchem das Modul bewertet wird */
	event void changeGradeSystem (GradeSystem gradeSystem);
}

/** Definiert das Modul, welches sich aus Units zusammensetzt, als Erweiterung des abstrakten Moduls */
class ModuleWithUnits @@ Mit_Units extends ModuleAbstract {
	public Unit ** units hierarchy programHierarchy;
	/* Ermöglicht das Hinzufügen von Unit zu ModuleWithUnits und erwartet Name & creditPoints. Wirft eine Exception, falls Unit mit identischem Name bereits in Modul vorhanden ist. */
	void addUnit(String name, Fraction creditPoints) throws CycleException, AlreadyExistsInParentException;
}

/** Definiert die Unit, welche als Teilleistungen in ModuleWithUnits eingebunden werden */
class Unit {
	public prior String name;
	public prior Fraction creditPoints;
	/* Ermöglicht das Ändern der CreditPoints, welche durch das absolvieren der Unit erreicht werden können */
	void changeCPOnUnit(Fraction creditPoints);
	/* Gibt eine Kopie von sich für eine Studiengruppe aus */
	UnitSGroup copyForStudyGroup();
}

																			/* Aufbau der Studiengruppen */
class StudyGroup {
	public prior indexed String name;
	public-write ProgramSGroup program;
	public leaf-view symmetric (public no-view parentGroup) Student ** students;
	/* Fügt den Student zu der Gruppe hinzu, schmeißt Exception, wenn Student schon drin ist. */
	void addStudent(Student student) throws AlreadyExistsInParentException;
	public no-view MyBoolean finished;
/* Beendet die Studiengruppe, Noten können nicht mehr verändert werden | Exception wenn Studiengruppe schon beendet ist */
	void endStudyGroup () throws AlreadyFinishedException;
}

hierarchy programHierarchySGroup ## pro_hier_s;

class ProgramSGroup {
	public ModuleAbstractSGroup ** modules hierarchy programHierarchySGroup;
	public derived String name;
	public derived Fraction creditPoints;
	prior Program programCopy;
	/* Ermöglicht das Hinzufügen von Modulen und Modulgruppen zu einem Studienprogramm. Wirft eine Exception, falls Modul/Modulgruppe bereits in Studienprogramm vorhanden ist. */
	void addModule(ModuleAbstractSGroup module) throws CycleException;
	/* Gibt eine Kopie von sich für einen Studenten aus */
	ProgramStudent copyForStudent();
	public no-view MyBoolean finished;
/* Finalisiert das Programm, Noten können nicht mehr verändert werden | Exception wenn Studiengruppe schon beendet ist */
	void endProgram();
}

abstract string-factory class ModuleAbstractSGroup ## m_abstr_gr {
	public derived String name;
	public abstract derived Fraction creditPoints;		
	public no-view prior ModuleAbstract moduleCopy;
	/* Gibt eine Kopie von sich für einen Studenten aus */
	abstract ModuleAbstractStudent copyForStudent();
	public no-view MyBoolean finished;
/* Finalisiert das Modul, Noten können nicht mehr verändert werden | Exception wenn Studiengruppe schon beendet ist */
	abstract void endModule();
}

class ModuleGroupSGroup extends ModuleAbstractSGroup {
	public ModuleAbstractSGroup ** modules hierarchy programHierarchySGroup;
	/* Ermöglicht das Hinzufügen von Modulen zur jeweiligen Modul-Gruppe. Wirft Exception, falls Modul mit identischem Namen bereits in Modulgruppe vorhanden ist. */
	void addModule(ModuleAbstractSGroup module) throws CycleException;
}

class ModuleAtomarSGroup extends ModuleAbstractSGroup {
	prior Fraction ownCreditPoints;
	public no-view prior GradeSystem gradeSystem;
}

class ModuleWithUnitsSGroup ## m_unit_gr extends ModuleAbstractSGroup {
	public UnitSGroup ** units hierarchy programHierarchySGroup;
	/* Ermöglicht das Hinzufügen von Unit zu ModuleWithUnits und erwartet Name & creditPoints. Wirft eine Exception, falls Unit mit identischem Name bereits in Modul vorhanden ist. */
	void addUnit(UnitSGroup unit) throws CycleException;
/* CreditPoints der einzelnen Units ändern, ohne die Gesamtmenge der CPs für das Modul zu verändern | Exception wenn CP <= 0 seien würden oder Studiengruppe abgeschlossen ist */
	void swapCP(UnitSGroup fromUnit, UnitSGroup ToUnit, Fraction creditPoints) throws UnitSwapException,AlreadyFinishedException;
}

class UnitSGroup {
	public derived String name;
	prior Unit unitCopy;
	public prior Fraction creditPoints;
	/* Fügt CP hinzu */
	void addCP(Fraction creditPoints);
   /* Zieht CP ab | Exception wenn CP <= 0 seien würden */
	void subCP(Fraction creditPoints) throws UnitSwapException;
	/* Gibt eine Kopie von sich für einen Studenten aus */
	UnitStudent copyForStudent();
	public no-view MyBoolean finished;
	/* Finalisiert die Unit, Noten können nicht mehr verändert werden | Exception wenn Studiengruppe schon beendet ist */
	void endUnit();
}


		
																	/* Aufbau der Studenten */
/** Initialisiert das Objekt Student und die dazugehörigen Attribute des Studenten */
class Student{
	public prior String firstName;
	public prior String lastName;
	public prior Date birthDate;
	public derived Integer matrNr;
	public-write ProgramStudent program;
	public ProgramStudent ** oldPrograms;
}

server StudentService extends Service {
	public derived Student student;
}

hierarchy programHierarchyStudent ## pr_hier_std;

class ProgramStudent (NoProgram) {
	public ModuleAbstractStudent ** modules hierarchy programHierarchyStudent;
	public derived String name;
	public derived Fraction creditPoints;
	public no-view prior ProgramSGroup programCopy;
	/* Ermöglicht das Hinzufügen von Modulen und Modulgruppen zu einem Studienprogramm. Wirft eine Exception, falls Modul/Modulgruppe bereits in Studienprogramm vorhanden ist. */
	void addModule(ModuleAbstractStudent module) throws CycleException;
	public no-view derived Grade grade;
	public no-view derived MyBoolean finished;
	public no-view derived Fraction passedCP;
}

abstract string-factory class ModuleAbstractStudent ## m_abstr_st {
	public no-view prior ModuleAbstractSGroup moduleCopy;
	public derived String name;
	public derived Fraction creditPoints;
	public abstract no-view derived Grade grade;
	public abstract no-view derived Fraction CPmulGrade;
	public abstract no-view derived Fraction CPwithGrade;
	public abstract no-view derived Fraction passedCP;
	public no-view derived MyBoolean finished;
}

class ModuleGroupStudent extends ModuleAbstractStudent {
	public ModuleAbstractStudent ** modules hierarchy programHierarchyStudent;
	/* Ermöglicht das Hinzufügen von Modulen zur jeweiligen Modul-Gruppe. Wirft Exception, falls Modul mit identischem Namen bereits in Modulgruppe vorhanden ist. */
	void addModule(ModuleAbstractStudent module) throws CycleException;
}

class ModuleAtomarStudent ## m_atom_stud extends ModuleAbstractStudent implements LectureWithGrade {
	public no-view GradesInSimpleOrThird ownGrade;
	public GradeChange ** changes;
}

class ModuleWithUnitsStudent ## m_unit_stud extends ModuleAbstractStudent {
	public UnitStudent ** units hierarchy programHierarchyStudent;
	/* Ermöglicht das Hinzufügen von Unit zu ModuleWithUnits und erwartet Name & creditPoints. Wirft eine Exception, falls Unit mit identischem Name bereits in Modul vorhanden ist. */
	void addUnit(UnitStudent unit) throws CycleException;
}

class UnitStudent implements LectureWithGrade {
	prior UnitSGroup unitCopy;
	public derived String name;
	public derived Fraction creditPoints;
	public no-view GradesInThird grade;
	public no-view derived Fraction CPmulGrade;
	public no-view derived Fraction CPwithGrade;
	public no-view derived Fraction passedCP;
	public GradeChange ** changes;
	public no-view derived MyBoolean finished;
}

interface LectureWithGrade {
	/* Note ändern und alte Note in Historie vermerken | Exception wenn Note aus falschem Notensystem gewählt wird oder Studiengang beendet ist*/
	void changeGrade(Grade grade, String comment) throws InvalidGradeForSystemException, AlreadyFinishedException;
}
																																			/* Noten */

/** Definiert das Notensystem mit den vordefinierten Notensystemarten */
abstract class GradeSystem (ThirdGradeSystem, SimpleGradeSystem) { }

abstract class Grade {
	/* Gibt eine Fraction mit dem Wert der Grade aus | Exception wenn NoGrade oder aus zweiwertigem System*/
	abstract Fraction toFraction() throws NoFractionValueException;
}

abstract string-factory class GradesInSimpleOrThird ## GrIn2or3 extends Grade {}

abstract string-factory class GradesInSimple (Passed @@ Bestanden, NotPassed @@ Nicht_Bestanden) extends GradesInSimpleOrThird { }

abstract string-factory class GradesInThird (T_1_0 @@ 1.0, T_1_3 @@ 1.3, T_1_7 @@ 1.7, T_2_0 @@ 2.0, T_2_3 @@ 2.3, T_2_7 @@ 2.7, T_3_0 @@ 3.0, T_3_3 @@ 3.3, T_3_7 @@ 3.7, T_4_0 @@ 4.0, T_5_0 @@ 5.0, NoGrade @@ Keine_Note) extends GradesInSimpleOrThird { }

abstract class GradesInTenth ( Z_1_0 @@ 1.0, Z_1_1 @@ 1.1, Z_1_2 @@ 1.2, Z_1_3 @@ 1.3, Z_1_4 @@ 1.4, Z_1_5 @@ 1.5, Z_1_6 @@ 1.6, Z_1_7 @@ 1.7, Z_1_8 @@ 1.8, Z_1_9 @@ 1.9, Z_2_0 @@ 2.0, Z_2_1 @@ 2.1, Z_2_2 @@ 2.2, Z_2_3 @@ 2.3, Z_2_4 @@ 2.4, Z_2_5 @@ 2.5, Z_2_6 @@ 2.6, Z_2_7 @@ 2.7, Z_2_8 @@ 2.8, Z_2_9 @@ 2.9, Z_3_0 @@ 3.0, Z_3_1 @@ 3.1, Z_3_2 @@ 3.2, Z_3_3 @@ 3.3, Z_3_4 @@ 3.4, Z_3_5 @@ 3.5, Z_3_6 @@ 3.6, Z_3_7 @@ 3.7, Z_3_8 @@ 3.8, Z_3_9 @@ 3.9, Z_4_0 @@ 4.0, Z_5_0 @@ 5.0) extends Grade {
}

class GradeChange { 
	public prior no-view Grade fromGrade;
	public prior no-view Grade toGrade;
	public no-view Date dateOfChange;
	public prior no-view String comment;
}

																												/* Exceptions */
exception UnitSwapException{}
exception AlreadyExistsInParentException{}
exception InvalidGradeForSystemException{}
exception NoFractionValueException{}
exception AlreadyFinishedException{}

																													/* Boolean */

abstract class MyBoolean (BTrue, BFalse) {
	abstract extern boolean toBoolean();	
}
}

