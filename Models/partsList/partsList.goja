model partsList {

server Server {
	public PartsListManager manager;
	void createProduct(String name, Fraction price) throws PartsListException;
	void createMaterial(String name, Fraction price) throws PartsListException;
	void addPart(Product product, Component component, Integer quantity);
   void findComponents(String name);
	void clearComponents();
	void changePrice(Component component, Fraction price);
	void clearError(ErrorDisplay error);
}

class PartsListManager {
	public Component ** String ** currentComponents##currComps;
	active void createProduct(String name, Fraction price) throws PartsListException;
	active void createMaterial(String name, Fraction price) throws PartsListException;
   void findComponents(String name);
	void clearComponents();
}

abstract class Component {
	indexed public prior String name;
	abstract extern boolean contains(Component component);
	abstract ComponentLst fetchMaterials();
	abstract Fraction fetchOverallPrice();
	public prior Fraction price;
	public derived Fraction overAllPrice;
	void changePrice(Fraction price);
}

class Material extends Component {}

class Product extends Component {
	public ComponentLst components;
	public derived ComponentLst materials;
	active void addPart(Component component, Integer quantity) throws PartsListException;
}

class ComponentLst {
	public QuantifiedComponent ** Component ** parts; 
	void addPart(Component component, Integer quantity);
	extern boolean contains(Component component);
	ComponentLst fetchMaterials();
	Fraction fetchOverallPrice();
	ComponentLst multiply(Integer factor);
	ComponentLst addList(ComponentLst argument);
}

class QuantifiedComponent {
	public prior Integer quantity;
	public final prior Component component;
	void addQuantity(Integer quantity);
	extern boolean contains(Component component);
	ComponentLst fetchMaterials();
	Fraction fetchOverallPrice();
	QuantifiedComponent multiply(Integer factor);
}

exception PartsListException{}

}

