model partsList {

server Server {
	Component ** currentComponents##currComps;
	void createProduct(String name, Fraction price) throws PartsListException;
	void createMaterial(String name, Fraction price) throws PartsListException;
	void addPart(Product product, Component component, Integer quantity) throws PartsListException;
	ComponentLst fetchMaterials(Component component);
	Fraction fetchOverallPrice(Component component);
   void findComponents(String name);
	void clearComponents();
}

abstract class Component {
	indexed public prior String name;
	abstract extern boolean contains(Component component);
	abstract ComponentLst fetchMaterials();
	abstract Fraction fetchOverallPrice();
	public prior Fraction price;
}

class Material extends Component {}

class Product extends Component {
	ComponentLst components;
	void addPart(Component component, Integer quantity) throws PartsListException;
}

class ComponentLst {
	public QuantifiedComponent ** parts; 
	void addPart(Component component, Integer quantity);
	extern boolean contains(Component component);
	ComponentLst fetchMaterials();
	Fraction fetchOverallPrice();
	ComponentLst multiply(Integer factor);
	ComponentLst addList(ComponentLst argument);
}

class QuantifiedComponent {
	public prior Integer quantity;
	public final prior Component component;
	void addQuantity(Integer quantity);
	extern boolean contains(Component component);
	ComponentLst fetchMaterials();
	Fraction fetchOverallPrice();
	QuantifiedComponent multiply(Integer factor);
}

exception PartsListException{}

}

